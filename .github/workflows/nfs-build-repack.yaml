name: Repack volume-nfs with updated schema

on:
  workflow_dispatch: {}
  push:
    branches:
      - "*"
    tags:
      - "*"

env:
  SOURCE_IMAGE: gcr.io/google_containers/volume-nfs:0.8
  DOCKER_ORG: nebari
  STATIC_TAG: 0.8-repack
  VALID_TYPES: "application/vnd.oci.image.manifest.v1+json application/vnd.docker.distribution.manifest.v2+json"

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  repack-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout üõéÔ∏è"
        uses: actions/checkout@v4

      - name: "Install skopeo + jq üß∞"
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: "Login to GHCR üîê"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.BOT_GHCR_TOKEN }}

      - name: "Login to Quay üîê"
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: "Define static destinations üè∑Ô∏è"
        id: dests
        run: |
          GHCR_DEST="ghcr.io/${{ github.repository_owner }}/volume-nfs:${STATIC_TAG}"
          QUAY_DEST="quay.io/${{ env.DOCKER_ORG }}/volume-nfs:${STATIC_TAG}"
          echo "ghcr=${GHCR_DEST}" >> "$GITHUB_OUTPUT"
          echo "quay=${QUAY_DEST}" >> "$GITHUB_OUTPUT"
          echo "Publishing to:"
          echo "  - ${GHCR_DEST}"
          echo "  - ${QUAY_DEST}"

      - name: "Repack & Push to GHCR üê≥"
        env:
          SRC: ${{ env.SOURCE_IMAGE }}
          DEST: ${{ steps.dests.outputs.ghcr }}
          VALID_TYPES: ${{ env.VALID_TYPES }}
        run: |
          set -euo pipefail
          echo "Repacking: ${SRC}  ==>  ${DEST}"
          skopeo copy --insecure-policy --format oci "docker://${SRC}" "docker://${DEST}"

          echo "Verifying manifest schema for ${DEST}"
          MT=$(skopeo inspect --raw "docker://${DEST}" | jq -r '.mediaType // .manifests[0].mediaType')
          echo "  Detected mediaType: ${MT}"
          ok=false
          for vt in ${VALID_TYPES}; do
            if [ "${MT}" = "${vt}" ]; then ok=true; fi
          done
          if [ "${ok}" != "true" ]; then
            echo "‚ùå Image manifest schema is not OCI or Docker schema v2. Got: ${MT}"
            exit 1
          fi
          echo "‚úÖ Schema OK for ${DEST}"

      - name: "Repack & Push to Quay üê≥"
        env:
          SRC: ${{ env.SOURCE_IMAGE }}
          DEST: ${{ steps.dests.outputs.quay }}
          VALID_TYPES: ${{ env.VALID_TYPES }}
        run: |
          set -euo pipefail
          echo "Repacking: ${SRC}  ==>  ${DEST}"
          skopeo copy --insecure-policy --format oci "docker://${SRC}" "docker://${DEST}"

          echo "Verifying manifest schema for ${DEST}"
          MT=$(skopeo inspect --raw "docker://${DEST}" | jq -r '.mediaType // .manifests[0].mediaType')
          echo "  Detected mediaType: ${MT}"
          ok=false
          for vt in ${VALID_TYPES}; do
            if [ "${MT}" = "${vt}" ]; then ok=true; fi
          done
          if [ "${ok}" != "true" ]; then
            echo "‚ùå Image manifest schema is not OCI or Docker schema v2. Got: ${MT}"
            exit 1
          fi
          echo "‚úÖ Schema OK for ${DEST}"

      - name: "Summary"
        run: |
          echo "Successfully repacked ${SOURCE_IMAGE} to:"
          echo "  - ghcr.io/${{ github.repository_owner }}/volume-nfs:${STATIC_TAG}"
          echo "  - quay.io/${{ env.DOCKER_ORG }}/volume-nfs:${STATIC_TAG}"
